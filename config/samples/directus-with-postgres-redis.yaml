apiVersion: directus.example.com/v1
kind: Directus
metadata:
  name: directus-postgres-redis
  namespace: default
spec:
  # Production-like configuration with PostgreSQL and Redis
  replicaCount: 1
  
  image:
    repository: directus/directus
    tag: "latest"
    pullPolicy: IfNotPresent
  
  adminEmail: "admin@company.com"
  
  # Create service account
  serviceAccount:
    create: true
  
  service:
    type: ClusterIP
    port: 80
  
  # PostgreSQL database configuration
  database:
    engine: postgresql
    host: postgresql.default.svc.cluster.local
    port: 5432
    database: directus_db
    username: directus_user
    existingSecret: postgresql-credentials
  
  # Enable Redis for caching and sessions
  redis:
    enabled: true
    host: redis.default.svc.cluster.local
    port: 6379
  
  # Enable probes with proper delays for database initialization
  enableLivenessProbe: true
  enableReadinessProbe: true
  enableStartupProbe: true
  
  # Create application secrets
  createApplicationSecret: true
  
  # Environment variables for optimal performance
  extraEnvVars:
    - name: PUBLIC_URL
      value: "http://localhost:8055"
    - name: LOG_LEVEL
      value: "info"
    - name: CACHE_ENABLED
      value: "true"
    - name: CACHE_STORE
      value: "redis"
    - name: CACHE_REDIS
      value: "redis://redis.default.svc.cluster.local:6379"
    - name: SESSION_STORE
      value: "redis"
    - name: SESSION_REDIS
      value: "redis://redis.default.svc.cluster.local:6379"
    - name: RATE_LIMITER_ENABLED
      value: "true"
    - name: RATE_LIMITER_STORE
      value: "redis"
    - name: RATE_LIMITER_REDIS
      value: "redis://redis.default.svc.cluster.local:6379"
    - name: EMAIL_FROM
      value: "admin@company.com"
    - name: EMAIL_TRANSPORT
      value: "smtp"
    # Database connection settings
    - name: DB_CONNECTION_TIMEOUT
      value: "60000"
    - name: DB_POOL_MIN
      value: "0"
    - name: DB_POOL_MAX
      value: "10"
  
  # Attach database credentials
  attachExistingSecrets:
    - postgresql-credentials
  
  # Resource requirements for production
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  # Pod security context
  podSecurityContext:
    fsGroup: 2000
  
  # Container security context
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000
  
  # Pod annotations for monitoring
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8055"
    prometheus.io/path: "/metrics" 